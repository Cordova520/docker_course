# Volumes are folders on your host machine hard drive which are mounted ("made available, mapped) into containers
    Volumes persist of a container shuts down. If a container (re-) starts and mounts a volumes, any data inside of that volume is available in the container.
    A container can write data into a volume and read data from it.

# There are 2 types of volumes:
    - Anonymous Volumes

        Anonymous volumes are not removed when not using --rm argument, It will start pilling up a bunch of unused anonymous volumes
        YOu can clear them via:
            docker vokune rn <VOLUME_NAME>
            or
            docker volume prune 

    - Named Volumes
        These are great for data which should be persistent.
        To create one, you should use the following syntax:
        
        docker run -d -p <host>:<port> --rm --name <CONTAINER_NAME> -v <VOLUME_NAME>:<PATH_OF_THE_CONTAINER> <IMAGE_NAME>

        PATH_OF_THE_CONTAINER is where the volume will be saved in our machine, if the folder does not exist it will create it.
        This volume will not be removed when the containes is stopped

        when checking for volumes, our volumes will be there

    In both cases sets up a folder/path on your host machine exact location is unknown to you (=dev). MAnaged via docker volume commands

    To see al the volumes you have, run the command:
        docker volume ls

    The volume exist as long as our container exists.
 # A defined path in the container is mapped to the created volume/mount
 # Bind mounts (Code sharing)
    BIng mounts are managing by you. You define a folder/path on your host machine
    Great for persistent and editable (by you) data
    This can not be declared inside the Dockerfile
    For creating a Bind Mount you must add the following in your container creation command, right after the volume declaration
        -v "<PATH_ON_YOUR_MACHINE>:<PATH_INSIDE_THE_CONTAINER>"

        NOTE: <PATH_ON_YOUR_MACHINE> must be an absolute path.

        you can do that by use the enviroment variable $(pwd)
# Beside creating a volume along the command line when creating a container, you can also create a Named Volume with the following command:
    docker volume create <VOLUME_NAME>

# You can also inspect the content of you volume by typing:
    docker volume inspect <VOLUME_NAME>

# Volumes also can be deleted  by using:
    docker volume rm <VOLUME_NAME>

    -This only works for unused volumes
    - When a volume is removed, you will lose all the data inside it

# Inside a .dockerignore file, you can specify what files not to be copied to the docker image

# ARGument & ENVironment Variables
    Docker Support build-time ARGuments and runtime ENVironment Variables

    -ARG:
        -available inside Dockerfile, NOT accessible in CMD or any applicarion Code
        - Set on image build (docker build) via --build-arg
    -ENV:
        - Available inside of Dockerfile & in application Code
        - Set via ENV in Dockerfile or via --env on docker run

    ENVironment variables can be declared inside the Dockerfile under the name:
        ENV <VARIABLE_NAME> <VALUE>
    
    Also must ve declared with the use of:
     EXPOSE $<VARIABLE_NAME>

    On the command to create our container we cal also declare it by adding the argument:
        --env <VARIABLE_NAME>=<VALUE>

        this syntax is also valid:

        --e <VARIABLE_NAME>=<VALUE>

    It is also possible to have a fila named .env, where all the environment variables will be declared
    This is used with the command when creating the container:
        --env-file <PATH_ON_YOUR_MACHINE>

# Buildtime ARGuments

    This is an argument used inside the Dockerfile where you can stablish and set the default value for this environment variable
    Is used with the ARG variable inside the Dockerfile after declared in the ENV variable with a "$" upfront, to declare that this is an enviroment variable

    To modify this value, you can use the following syntax in your build command:
        docker build -t <IMAGE_NAME>:<TAG> --build-arg <VARIABLE_NAME> <VARIABLE_VALUE> .

    This helps to create different images without to modify the Dockerfile

    


